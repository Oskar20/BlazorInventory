@using Entities
@using Business


<div class="form-group">
    <select class="form-control" @onchange="OnChangedWareHouse">
        <option value="">Seleccione una bodega</option>
        @foreach (var wareHouse in wereHouses)
        {
            <option value="@wareHouse.WareHouseId">@wareHouse.WareHouseName</option>
        }

    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Seleccione un producto</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }

        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />

    </div>
    <div class="form-group">
        <label>Es una entrada</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />

    </div>
    <input type="button" class="form-control" value="@buttonValue" onclick="SaveInOut" />

</EditForm>
<div class="text-center" h4>
    @message
</div>


@code {

    InputOutputEntity oInOut = new InputOutputEntity();

    List<WareHouseEntity> wereHouses = new List<WareHouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message;

    string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";

    protected override async Task OnInitializedAsync()
    {
        wereHouses = B_WareHouse.WareHouseList();
    }



    private void OnChangedWareHouse(ChangeEventArgs e)
    {
        var idWareHouse = e.Value.ToString();

        storages = B_Storage.StorageListByWarehouse(idWareHouse);

    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if(IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);


                message = $"El producto {oProduct.ProductName} ha sido actualizado";

            }

            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}";
            }

        }

    }

    private bool IsBiggerThanZero(int quantity, int storaQuantity)
    {
        if (storaQuantity > quantity)
        {
            return true;
        }

        return false;

    }

}
